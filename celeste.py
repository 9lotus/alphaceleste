"""
Author : Rori Wu, Zenia Haroon

Date : 7/27/23

Description : Contains the CelesteEnvironment class and all of its functionality
"""
import sys
import pygame

screendims = (320, 180)
gravity = 9.8
maxv = 1
block = pygame.image.load('art/Tile_White.png')
spikes = pygame.image.load('art/Tile_Spikes.png')
ledge = pygame.image.load('art/Tile_Ledge.png')
maddy = pygame.image.load('art/Hitbox_Maddy.png')
tilesize = 8
gamemap = [['1','1','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0',],
           ['1','1','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0',],
           ['1','1','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0',],
           ['1','1','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0',],
           ['1','1','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','2','2','2','2','0','0','0','0','0','0','0','0','0','0','0','0',],
           ['1','1','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','2','2','2','2','1','1','1','1','0','0','0','0','0','0','0','0','0','0','0','0',],
           ['1','1','1','1','1','0','0','0','0','0','2','2','2','2','2','2','0','0','0','0','1','1','1','1','1','1','1','1','0','0','0','0','0','0','0','0','0','0','0','0',],
           ['0','0','0','0','0','0','0','0','0','0','1','1','1','1','1','1','0','0','0','0','1','1','1','1','1','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0',],
           ['0','0','0','0','0','0','0','0','0','0','1','1','1','1','1','1','0','0','0','0','1','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0',],
           ['0','0','0','0','0','0','0','0','0','0','1','1','1','1','1','1','0','0','0','0','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0',],
           ['0','0','0','0','0','0','0','0','0','0','1','1','1','1','1','1','0','0','0','0','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1','1',],
           ['1','1','1','1','1','1','0','0','0','0','1','1','1','1','1','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1','1','1','1','1','1','1','1','1',],
           ['1','1','1','1','0','1','0','0','0','0','1','1','1','1','1','1','0','0','0','0','0','0','0','0','0','0','0','3','3','1','1','1','1','1','1','1','1','1','1','1',],
           ['1','1','0','0','0','1','0','0','0','0','1','1','1','1','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1','1','1','1','1','1','1','1','1','1','1',],
           ['1','1','0','0','0','0','0','0','0','0','1','1','1','1','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1','1','1','1','1','1','1','1','1',],
           ['1','0','0','0','0','0','0','0','0','0','1','1','1','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1','1','1','1','1','1','1','1','1',],
           ['1','0','0','0','0','0','0','0','0','0','1','1','1','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','0','1','1','1','1','1','1','1','1','1',],
           ['1','0','0','0','0','0','0','0','0','0','1','1','1','1','0','0','0','0','0','0','0','0','0','0','0','0','3','3','3','3','3','1','1','1','1','1','1','1','1','1',],
           ['1','0','0','0','0','0','0','0','1','1','1','1','1','1','0','0','0','0','0','0','0','0','0','0','0','0','0','0','2','2','2','1','1','1','1','1','1','1','1','1',],
           ['1','0','0','0','0','0','0','0','1','1','1','1','1','1','0','0','0','0','0','0','0','0','2','2','2','2','2','2','1','1','1','1','1','1','1','1','1','1','1','1',],
           ['1','0','0','0','0','0','0','0','1','1','1','1','1','1','2','2','0','0','0','0','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1',],
           ['1','3','3','3','1','1','1','1','1','1','1','1','1','1','1','1','2','2','2','2','2','2','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1',],
           ['1','0','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1',]]

class CelesteEnvironment:

    #Initializes the CelesteEnvironment class
    def __init__(self):
        pygame.init()
        pygame.display.set_caption("Celeste")
        self.screen = pygame.display.set_mode(screendims)
        self.clock = pygame.time.Clock()
        self.dt = 0
        self.x = 0
        self.y = 0
        self.maddy_pos = [16, 158]
        self.maddy_xvelocity = 0
        self.maddy_yvelocity = 0
        self.dash = 1

    #Updates time
    def step(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                 return True
        self.dt = self.clock.tick(60)/1000
        return False

    #Updates madeline's position
    def maddy_update(self):
        self.maddy_pos[0] += self.maddy_xvelocity
        self.maddy_pos[1] += self.maddy_yvelocity

    #def collision(self, rect, tiles):
        
    #Renders all visuals
    def render(self):
        self.screen.fill("black")
        self.y = 0
        self.screen.blit(maddy, self.maddy_pos)
        for row in gamemap:
            self.x = 0
            for tile in row:
                if tile == '1':
                    self.screen.blit(block, (self.x*tilesize, self.y*tilesize))
                elif tile == '2':
                    self.screen.blit(spikes, (self.x*tilesize, self.y*tilesize))
                elif tile == '3':
                    self.screen.blit(ledge, (self.x*tilesize, self.y*tilesize))
                self.x += 1
            self.y += 1 
        pygame.display.flip()

    #Dictates the actions of the player
    def get_playeraction(self, action):
        if not(action[pygame.K_RIGHT] and action[pygame.K_LEFT]):
            if action[pygame.K_RIGHT]:
                if self.maddy_xvelocity < maxv:
                    if self.maddy_xvelocity < 0:
                        self.maddy_xvelocity = 0
                    if self.maddy_xvelocity + 5 * self.dt >= 1:
                        self.maddy_xvelocity = maxv
                    else:
                        self.maddy_xvelocity += 5 * self.dt
            elif action[pygame.K_LEFT]:
                if self.maddy_xvelocity > -maxv:
                    if self.maddy_xvelocity > 0:
                        self.maddy_xvelocity = 0
                    if self.maddy_xvelocity - 5 * self.dt <= -1:
                        self.maddy_xvelocity = -maxv
                    else:
                        self.maddy_xvelocity -= 5 * self.dt
            else:
                self.maddy_xvelocity = 0
        else:
            self.maddy_xvelocity = 0

    #Quits the game
    @staticmethod
    def close():
        pygame.quit()
    
    #Returns player input
    @staticmethod
    def get_playerinput():
        return pygame.key.get_pressed()